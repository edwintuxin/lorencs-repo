= CMPUT 379 - Assignment 2 Report


==== Overview:

The implementation of this assignment follows the same structure as the first assignment, with the required design changes applied. The execution starts in the 'main' file of the program, which simply calls on functions of other files to perform the required duties of the program. There are four source files to the program: 'main', 'mainFunctions', 'child', and 'pipeMessages'. The 'mainFunctions' file contains the majority of the functions used in the execution of the program. The 'child' file contains the code that is exclusively executed by the children during their run. The 'pipeMessages' file contains code that is used for to work with the messages that are sent over the UNIX pipes.
	

==== Design and Implementation:

===== Parent
The parent begins by setting up the signal handlers for SIGINT and SIGHUP. It then performs similar tasks as in the previous assignment (readFile() to read the config file, killPrevious() to kill any pre-existing procnannys, and initChildren() to initialize children according to the config file at the start), but instead of calling a function to wait for the children to finish, the parent calls parentLoop() which loops forever. In this loop it sleeps for 5 seconds, then checks and processes any messages from children (more on messages below). It then uses rescanProcs() to rescan the existing processes and assigns new or reassign existing children to monitor any processes that aren't already being monitored.
Upon catching a SIGINT, the parent sends an "exit" message to each child, and waits for every child to send back a "exit complete" acknowledgement. During this time it also accepts kill confirmations. This follows the class discussion of the parent using messages to kill children and waiting for the children to finish their monitoring before exiting.
Upon catching a SIGHUP, the parent simply call the readFile() function again.

===== Children
The children behave almost the same way as before, but their previous function of monitoring a process is wrapped into a function. The main exectuion of the child loops forever, blocking on the read end of the parent-to-child pipe. Once the child reads a "monitor" message, it begins to monitor the deisgnated process and then waits for more messages.

===== Messages
The messages are implemented using slightly modified code from lab 6. They are implemented simply as text messages which the parent and children parse. The messages that parent sends to child are:

* "monitor procName pid sleepTime"
  - "monitor" is just a keyword, the other three are variables with obvious meaning
* "exit"
  - tells the child to clean up and exit

The child can send the following messages:

* "available 0" or "available 1"
  - tells the parent that the child is finished monitoring and is available
  - 1 indicates succesfull kill, 0 indicates no kill
* "exit complete"
  - tells the parent that the child has completed exiting

===== Child Pool

The child pool is an array of typedef structs of "child", which is a struct that has the following elements:

* m_id
  - if child is monitoring a process this is the pid of the monitored process; otherwise it is 0
* p2c[2]
  - set of pipes for parent to child communication
* c2p[2]
  - set of pipes for child to parent communication

==== Testing:
	
I reran most of the scenarios from the previous assignment. New scenarios are:

* sending SIGINT to parent again while the parent is waiting for the children to finish exiting
* have some different processes (to be monitored) that exit after 6 seconds; monitor some of them for 4 seconds, the others for 8 seconds; after aproximately 6 seconds, rerun the script that executes more processes to monitor
  - this tests many things such as the child reporting processes exiting early, the parent properly processing children that have finished monitoring, and reassigning them to new processes to monitor, as well as forking off new children when there are not enough idle processes
* while the children are monitoring some process, add a process to monitor to config file, run new instances of the old processes and the new process, send SIGHUP to parent
  - tests the functionality of the rescanProcs() function as well as the SIGHUP signal handler;

==== Conclusion:
	
As I expected, the modularity in the previous assignment allowed me to expand the functionality of hte program ot fit the specifications without too much trouble. I did not have to change the control flow of my program too much, besides handling signals.