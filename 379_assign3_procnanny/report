= CMPUT 379 - Assignment 3 Report


=== Overview:

The main changes in this assignment were the refactoring of the 'main' and 'mainFunctions' files into the corresponding equivalents for the client and server, as well as implementing sockets for client to server communication. The server starts execution in the 'server.c' file, and calls on functions in the 'serverFunctions.c' file. The client starts its execution in the 'client.c' file and calls on functions in the 'serverFunctions.c' and 'pipeMessage.c' files.
	

=== Design and Implementation:

===== Server
The server begins by setting up the signal handlers, reading the config file, and killing previous processes. It then runs the 'serverLoop()'.  In this function, the server sets up the listening socket, and then in a loop, listens for incoming client connections. Upon a connection, the server accepts it, and sends the client the most recent config file. At the end of an iteration, the server reads and handles client messages. Upon a SIGHUP signal, the server re-reads the config, and sends the new version to all clients. Upon a SIGINT, the server sends all clients an "exit" message, and then waits for a confirmation from each client.

===== Client
The client begins by connecting to the server, killing previous processes, and then receiving the config file. It loops in a while(1) loop until it receive this file. It then calls 'parentLoop()'. In this loop, the parent sleeps for 5 seconds, then it receives child messages, receives server messages, and rescans for new processes (in that order). It receives child messages first so that in case the server sent an "exit" message, it can process the children's output messages. And it receives server messages before rescanning in case a new config file was sent. The parent exits the same way it did before, but instead of responding to a SIGINT, it responds to an "exit" message, and passes along the kill count info to the server upon the confirmed exit of all its children.

===== Parent/Child Relationship
Most of the code pertaining to this relationship remains unchanged. The only changes are the way that the child and parent perform their prints. A child formats the output string and sends it in a pipe message to the parent, who passes it to the server.

===== Pipe Messages
The parent to child messages remain the same as assign2 (descriptions follow new message types):

* 'monitor procName pid sleepTime'
* 'exit'

The child can send a new type of message 'output':

* 'output'
  - tells parent that the next message is an output string that must be passed to server
* 'available 0' or 'available 1'
* 'exit complete'

===== Socket Messages
Every socket message is preceded by a "header" message. This is an 8 char string defining the type of message that is to follow. Both sides know what size of message to accept for each type. The server to client messages are:

* 'config'
  - tells client that the next message is a config struct (in the form of an array of structs with string and int elements)
  - the message after that is the count of process names 
* 'exit'
  - tells client to exit cleanly and pass info back to server
  
The client to server messages are as follows:

* 'output'
  - tells server that the next message is a timestamped, formatted output string; server must print this to logfile
* 'exit'
  - confirmation that the client has exited cleanly
  - the following message is a kill count of that client
  - if this kill count is > 0, the next message is the node name of the client

=== Testing:
	
As parent/child code remained unchanged, it was only quickly tested to ensure that no new bugs were accidentally introduced. Other tests include:

* begin monitoring processes, send SIGINT to server before they are killed
  - tests the clean and proper exit of children, clients, and the server
* run 3 clients on 3 machines, add processes to config file and call SIGHUP, then execute the new processes on 2 of the machine
  - tests signal handling and the sending and receiving of the config struct
* run 3 clients on 3 machines, execute various numbers of monitored processes on the 3 machines at different time intervals
  - make sure each client reports the correct amount of kills and the server properly handles the aggregated data

=== Conclusion:
	
The hardest, but also most interesting, part of this assignment was coming up with a protocol for passing messages between the server and clients. The refactoring of the program into seperate server and client files was also a challenge.